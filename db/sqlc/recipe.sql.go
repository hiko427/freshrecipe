// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: recipe.sql

package db

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
  cuisine,
  num_people,
  ingredients,
  excluded_ingredients,
  mealtype,
  recipe
) VALUES (
  $1, $2 ,$3 ,$4 ,$5 ,$6
) RETURNING id, cuisine, num_people, ingredients, excluded_ingredients, mealtype, recipe, created_at
`

type CreateRecipeParams struct {
	Cuisine             string `json:"cuisine"`
	NumPeople           int64  `json:"num_people"`
	Ingredients         string `json:"ingredients"`
	ExcludedIngredients string `json:"excluded_ingredients"`
	Mealtype            string `json:"mealtype"`
	Recipe              string `json:"recipe"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Cuisine,
		arg.NumPeople,
		arg.Ingredients,
		arg.ExcludedIngredients,
		arg.Mealtype,
		arg.Recipe,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Cuisine,
		&i.NumPeople,
		&i.Ingredients,
		&i.ExcludedIngredients,
		&i.Mealtype,
		&i.Recipe,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getAllRecipe = `-- name: GetAllRecipe :one
SELECT id, cuisine, num_people, ingredients, excluded_ingredients, mealtype, recipe, created_at FROM recipes
`

func (q *Queries) GetAllRecipe(ctx context.Context) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getAllRecipe)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Cuisine,
		&i.NumPeople,
		&i.Ingredients,
		&i.ExcludedIngredients,
		&i.Mealtype,
		&i.Recipe,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, cuisine, num_people, ingredients, excluded_ingredients, mealtype, recipe, created_at FROM recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Cuisine,
		&i.NumPeople,
		&i.Ingredients,
		&i.ExcludedIngredients,
		&i.Mealtype,
		&i.Recipe,
		&i.CreatedAt,
	)
	return i, err
}

const listRecipe = `-- name: ListRecipe :many
SELECT id, cuisine, num_people, ingredients, excluded_ingredients, mealtype, recipe, created_at FROM recipes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRecipeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRecipe(ctx context.Context, arg ListRecipeParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipe, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Cuisine,
			&i.NumPeople,
			&i.Ingredients,
			&i.ExcludedIngredients,
			&i.Mealtype,
			&i.Recipe,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
